#!/usr/bin/env bash

set -e

cd "$(dirname "${BASH_SOURCE}")/../"

source ${DOTFILES_ROOT}/lib/output
source ${DOTFILES_ROOT}/lib/input
source ${DOTFILES_ROOT}/lib/tests
source ${DOTFILES_ROOT}/lib/utils
source ${DOTFILES_ROOT}/lib/ruby
source ${DOTFILES_ROOT}/lib/zsh

usage () {
  e_error "$1"

  cat <<HELP

Usage:
  $(basename "$0") [-y] [--skip=<step> ...]

Options:
  -y            Answer "yes" to all confirmation questions
  --skip=<step> Skips certain steps, available options:

                sync     Don't pull latest changes from the git repository
                install  Don't run platform-specific installation of software libraries & packages
                update   Don't update software libraries & packages

See the README for documentation:
${DOTFILES_REPO}/README.md
HELP

  exit 1
}

confirm() {
  if [ ${force_yes} ]; then
    return 0
  fi

  if seek_confirmation "$@"; then
    return 0
  else
    return 1
  fi
}

assert_prerequisites () {
  type_exists 'git' || die "git is required"
}

sync_dotfiles_repo () {
  e_header "Updating dotfiles project"
  e_info "==> pulling latest changes from repo"
  git pull --rebase origin master
  git submodule update --recursive --init --quiet
  e_success "==> done"
}

mirror_files () {
  e_header "Symlinking dotfiles into home directory"

  if ! confirm 'Warning: This step may overwrite your existing dotfiles.'; then
    e_warning "==> skipped symlinking of dotfiles"
  else
    # ZSH files
    mkdir -p "${HOME}/.zsh"
    dotfile "zsh/rc"              ".zshrc"
    dotfile "zsh/env"             ".zshenv"
    dotfile "zsh/login"           ".zlogin"
    dotfile "zsh/zplug"           ".zsh/zplug"
    dotfile "zsh/aliases"         ".zsh/aliases"
    dotfile "zsh/functions"       ".zsh/functions"
    dotfile "zsh/history"         ".zsh/history"
    dotfile "zsh/input"           ".zsh/input"
    dotfile "zsh/paths"           ".zsh/paths"
    dotfile "zsh/completion"      ".zsh/completion"

    # Bin
    mkdir -p "${HOME}/bin"
    dotfile "bin/dotfiles"        "bin/dotfiles"

    # Git
    copy    "git/config"          ".gitconfig"
    dotfile "git/attributes"      ".gitattributes"
    dotfile "git/ignore"          ".gitignore"

    # Curl
    dotfile "curl/rc"             ".curlrc"

    # Screen
    dotfile "screen/rc"           ".screenrc"

    # Ruby
    dotfile "ruby/gemrc"          ".gemrc"

    # SSH
    mkdir -p "${HOME}/.ssh"
    dotfile "ssh/config"          ".ssh/config"
  fi
}

install_git_config () {
  if [ ! -f ${GITRC_FILE} ]; then
    if seek_confirmation "Would you like to specify your git username/email address?"; then
      read -p "username: " username
      read -p "email: " email
      echo -e "git config --global user.name \"${username}\"\ngit config --global user.email \"${email}\"\n" > ${GITRC_FILE}
    else
      echo -e "# put 'git config' commands here\n" > ${GITRC_FILE}
    fi
    chmod +x ${GITRC_FILE}
  fi
}

mark_installed () {
  touch ${DOTFILES_ROOT}/.installed
}
