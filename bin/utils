#!/usr/bin/env zsh

source "${0:A:h:h}/zsh/env"

# add homebrew bin to path in case this is a new installation
path+=("$BREWPATH/bin")

# ensure common directories
mkdir -p "${HOME}/bin"
mkdir -p "${HOME}/.k9s"
mkdir -p "${HOME}/.ssh"
mkdir -p "${HOME}/.zsh"

# ask confirmation
confirm () {
  printf "\n"
  e_warning "$@"
  read -q answer\?"Continue? (y/n) "
  printf "\n"
  if [[ "$answer" =~ ^[Yy]$ ]]; then
    return 0
  else
    return 1
  fi
}

# Header logging
e_header() {
  printf "\n\n$(tput setaf 4)➡️  %s$(tput sgr0)\n" "$@"
}

# Info logging
e_info() {
  printf "$(tput setaf 7)%s$(tput sgr0)\n" "$@"
}

# Success logging
e_success() {
  printf "$(tput setaf 64)✅ %s$(tput sgr0)\n" "$@"
}

# Warning logging
e_warning() {
  printf "$(tput setaf 136)⚠️  %s$(tput sgr0)\n" "$@"
}

# Error logging
e_error() {
  printf "$(tput setaf 1)❌  %s$(tput sgr0)\n" "$@"
}

# Log error and exit
die () {
  e_error "$1"
  echo ''
  exit
}

# Test whether a command exists
# $1 - cmd to test
type_exists() {
  if type -f "$1" > /dev/null 2>&1; then
    return 0
  fi
  return 1
}

# Symlink $1 into $HOME
dotfile () {
  local from="${DOTFILES_ROOT}/${1}"
  local to="${HOME}/${2}"

  if [[ ! -f ${from} ]]; then
    die "${from} does not exist"
  fi

  # Force create/replace the symlink.
  ln -fs "${from}" "${to}"
  e_info "==> ${from} => ${to}"
}

# Copy $1 into $HOME
copy () {
  local from="${DOTFILES_ROOT}/${1}"
  local to="${HOME}/${2}"

  if [[ ! -f ${from} ]]; then
    die "${from} does not exist"
  fi

  # create/replace the file.
  cp -f "${from}" "${to}"
  e_info "==> ${from} => ${to}"
}

update_repo () {
  e_header "Updating dotfiles project"
  (cd "${DOTFILES_ROOT}" && git pull --rebase origin master)
  e_success "done"
}

install_dotfiles () {
  e_header "Symlinking dotfiles into home directory"

  # ZSH files
  dotfile "zsh/aliases"         ".zsh/aliases"
  dotfile "zsh/completion"      ".zsh/completion"
  dotfile "zsh/env"             ".zshenv"
  dotfile "zsh/functions"       ".zsh/functions"
  dotfile "zsh/history"         ".zsh/history"
  dotfile "zsh/input"           ".zsh/input"
  dotfile "zsh/paths"           ".zsh/paths"
  dotfile "zsh/zshrc"           ".zshrc"

  # Powerlevel10k config
  dotfile "zsh/p10k"            ".p10k.zsh"

  # Bin
  dotfile "bin/dotfiles"        "bin/dotfiles"

  # Git
  copy    "git/config"          ".gitconfig"
  dotfile "git/attributes"      ".gitattributes"
  dotfile "git/ignore"          ".gitignore"

  # Curl
  dotfile "curl/rc"             ".curlrc"

  # Screen
  dotfile "screen/rc"           ".screenrc"

  # Ruby
  dotfile "ruby/gemrc"          ".gemrc"

  # SSH
  dotfile "ssh/config"          ".ssh/config"

  # K9S
  dotfile "k9s/views.yml"       ".k9s/views.yml"

  e_success "dotfiles symlinked"
}

copy_ssh_key () {
  e_header "Installing ssh key"

  if [[ ! -f "${HOME}/.ssh/id_rsa" && ! -L "${HOME}/.ssh/id_rsa" ]]; then
    if confirm 'No existing SSH keypair found, should I install from backup?'; then
      SSH_DIR="${HOME}/Library/Mobile Documents/com~apple~CloudDocs/Settings/ssh"
      cp "${SSH_DIR}/id_rsa" "${HOME}/.ssh/id_rsa"
      cp "${SSH_DIR}/id_rsa.pub" "${HOME}/.ssh/id_rsa.pub"
      chmod 600 "${HOME}/.ssh/id_rsa" "${HOME}/.ssh/id_rsa.pub"
      e_success "symlinked SSH keypair from backup"
    fi
  else
    e_success "ssh key already installed"
  fi
}

copy_hosts_file () {
  e_header "Add custom hosts to /etc/hosts"

  HEADER="### CUSTOM HOSTS ###"
  if ! grep "${HEADER}" /etc/hosts > /dev/null 2>&1; then
    hosts=$(cat "${HOME}/Library/Mobile Documents/com~apple~CloudDocs/Settings/etc/hosts")
    echo -e "\n\n${HEADER}\n\n${hosts}\n" | (sudo sh -c 'tee -a /etc/hosts') > /dev/null 2>&1
    e_success "added hosts from backup to /etc/hosts"
  else
    e_success "hosts already added"
  fi
}

install_git_config () {
  e_header "Configuring git"

  GITRC_FILE="${HOME}/.gitrc"
  [[ -f "${GITRC_FILE}" ]] && source "${GITRC_FILE}"

  if ! git config --global --get user.name > /dev/null 2>&1; then
    if confirm "Would you like to specify your git username/email address?"; then
      read "username?username: "
      read "email?email: "
      echo -e "git config --global user.name \"${username}\"\ngit config --global user.email \"${email}\"\n" >> "${GITRC_FILE}"
    else
      echo -e "# put 'git config --global' commands here\n" > "${GITRC_FILE}"
    fi
  else
    e_success "git username/email is configured"
  fi

  # Delete Git's official completions to allow Zsh's official Git completions to work.
  # Git ships with really bad Zsh completions. Zsh provides its own completions
  # for Git, and they are much better.
  # https://github.com/Homebrew/homebrew-core/issues/33275#issuecomment-432528793
  # https://twitter.com/OliverJAsh/status/1068483170578964480
  # Unfortunately it's not possible to install Git without completions (since
  # https://github.com/Homebrew/homebrew-core/commit/f710a1395f44224e4bcc3518ee9c13a0dc850be1#r30588883),
  # so in order to use Zsh's own completions, we must delete Git's completions.
  # This is also necessary for hub's Zsh completions to work:
  # https://github.com/github/hub/issues/1956.
  GIT_ZSH_COMPLETIONS_FILE_PATH="$(brew --prefix)/share/zsh/site-functions/_git"
  if [[ -f ${GIT_ZSH_COMPLETIONS_FILE_PATH} ]]; then
    rm "${GIT_ZSH_COMPLETIONS_FILE_PATH}"
  fi
}

install_homebrew() {
  e_header "Installing Homebrew & formulae"
  if ! type_exists brew; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi

  brew bundle --file="${DOTFILES_ROOT}/macos/Brewfile"
  brew upgrade
  brew cleanup
  # symlink brew executable into home bin because /opt/homebrew is not in path by default
  ln -fs "$(which brew)" "${HOME}/bin/brew"
  e_success "done"
}

install_antibody () {
  e_header "Configuring antibody"
  antibody bundle < "${DOTFILES_ROOT}/zsh/plugins" > ~/.zsh/plugins
  antibody update
  e_success "zsh plugins and prompt installed"
}

install_rubygems() {
  e_header "Installing Ruby/gems"
  if [ ! -f "$(brew --prefix ruby)/bin/bundle" ]; then
    "$(brew --prefix ruby)/bin/gem" install bundler
    "$(brew --prefix ruby)/bin/bundle" install --gemfile "${DOTFILES_ROOT}/macos/Gemfile"
  fi

  "$(brew --prefix ruby)/bin/bundle" update --gemfile "${DOTFILES_ROOT}/macos/Gemfile"
  e_success "done"
}
