#!/usr/bin/env zsh

source "${0:A:h:h}/zsh/env"

# add homebrew bin to path in case this is a new installation
path+=("$BREWPATH/bin")

# ensure common directories
mkdir -p "${HOME}/bin"
mkdir -p "${HOME}/.k9s"
mkdir -p "${HOME}/.ssh"
mkdir -p "${HOME}/.zsh"

# ask confirmation
confirm () {
  printf "\n"
  e_warning "$@"
  read -q answer\?"Continue? (y/n) "
  printf "\n"
  if [[ "$answer" =~ ^[Yy]$ ]]; then
    return 0
  else
    return 1
  fi
}

# Header logging
e_header() {
  printf "\n\n$(tput setaf 4)➡️  %s$(tput sgr0)\n" "$@"
}

# Info logging
e_info() {
  printf "$(tput setaf 7)%s$(tput sgr0)\n" "$@"
}

# Success logging
e_success() {
  printf "$(tput setaf 64)✅ %s$(tput sgr0)\n" "$@"
}

# Warning logging
e_warning() {
  printf "$(tput setaf 136)⚠️  %s$(tput sgr0)\n" "$@"
}

# Error logging
e_error() {
  printf "$(tput setaf 1)❌  %s$(tput sgr0)\n" "$@"
}

# Log error and exit
die () {
  e_error "$1"
  echo ''
  exit
}

# Test whether a command exists
# $1 - cmd to test
type_exists() {
  if type -f "$1" > /dev/null 2>&1; then
    return 0
  fi
  return 1
}

# Symlink $1 into $HOME
dotfile () {
  local from="${DOTFILES_ROOT}/${1}"
  local to="${HOME}/${2}"

  if [[ ! -f ${from} ]]; then
    die "${from} does not exist"
  fi

  # Force create/replace the symlink.
  ln -fs "${from}" "${to}"
  e_info "==> ${from} => ${to}"
}

# Copy $1 into $HOME
copy () {
  local from="${DOTFILES_ROOT}/${1}"
  local to="${HOME}/${2}"

  if [[ ! -f ${from} ]]; then
    die "${from} does not exist"
  fi

  # create/replace the file.
  cp -f "${from}" "${to}"
  e_info "==> ${from} => ${to}"
}

update_repo () {
  e_header "Updating dotfiles project"
  (cd "${DOTFILES_ROOT}" && git pull --rebase)
  e_success "done"
}

install_dotfiles () {
  e_header "Symlinking dotfiles into home directory"

  # ZSH files
  dotfile "zsh/options"         ".zsh/options"
  dotfile "zsh/aliases"         ".zsh/aliases"
  dotfile "zsh/completion"      ".zsh/completion"
  dotfile "zsh/env"             ".zshenv"
  dotfile "zsh/functions"       ".zsh/functions"
  dotfile "zsh/history"         ".zsh/history"
  dotfile "zsh/input"           ".zsh/input"
  dotfile "zsh/paths"           ".zsh/paths"
  dotfile "zsh/gcloud"          ".zsh/gcloud"
  dotfile "zsh/zshrc"           ".zshrc"

  # Powerlevel10k config
  dotfile "zsh/p10k"            ".p10k.zsh"

  # Bin
  dotfile "bin/dotfiles"        "bin/dotfiles"

  # Git
  copy    "git/config"          ".gitconfig"
  dotfile "git/attributes"      ".gitattributes"
  dotfile "git/ignore"          ".gitignore"

  # Curl
  dotfile "curl/rc"             ".curlrc"

  # Screen
  dotfile "screen/rc"           ".screenrc"

  # SSH
  dotfile "ssh/config"          ".ssh/config"

  # K9S
  dotfile "k9s/views.yml"       ".k9s/views.yml"

  e_success "dotfiles symlinked"
}

install_git_config () {
  e_header "Configuring git"

  GITRC_FILE="${DOTFILES_ROOT}/git/rc"
  if [[ ! -f "${GITRC_FILE}" ]]; then
    if confirm "Would you like to specify your git username/email address?"; then
      read "username?username: "
      read "email?email: "
      echo -e "git config --global user.name \"${username}\"\ngit config --global user.email \"${email}\"" >> "${GITRC_FILE}"
    else
      echo -e "# put 'git config --global' commands here\n" > "${GITRC_FILE}"
    fi
  fi

  if ! git config --global --get user.name > /dev/null 2>&1; then
    source "${GITRC_FILE}"
    e_success "git username/email is configured"
  else
    e_success "git username/email already configured"
  fi
}

install_homebrew() {
  e_header "Installing Homebrew & formulae"
  if ! type_exists brew; then
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  fi

  brew bundle --file="${DOTFILES_ROOT}/macos/Brewfile"
  brew upgrade
  brew cleanup
  # symlink brew executable into home bin because /opt/homebrew is not in path by default
  ln -fs "$(which brew)" "${HOME}/bin/brew"
  e_success "done"
}

install_antidote () {
  e_header "Configuring antidote"
  antidote update
  e_success "done"
}

configure_docker() {
  e_header "Configuring Docker"
  if ! type_exists docker; then
    e_warning "Docker not yet installed, run dotfiles again after installing"
    return 1
  fi

  docker completion zsh > "${DOTFILES_ROOT}/zsh/.completion/docker"
  CONFIG="${HOME}/.docker/config.json"
  if ! jq -e '.psFormat' < "${CONFIG}" &> /dev/null; then
    jq --sort-keys '. += { psFormat: "table {{.ID}}\t{{.Names}}\t{{.State}}\t{{.Status}}\t{{.RunningFor}}\t{{.Image}}" }' < "${CONFIG}" > tmp && mv tmp "${CONFIG}"
  fi
}
