[alias]
    # List aliases
    aliases = config --get-regexp alias

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Pull using rebase
    p = pull --rebase

    # Rebase current branch
    r = !git fetch && git rebase origin/master

    # Clone a repository including all submodules
    c = clone --recursive

    # Commit all changes
    ca = !git add -A && git commit -av

    # Just a shortcut for checkout
    co = checkout

    # Checkout master
    m = checkout master

    # Checkout master and pull
    mp = !git m && git p

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Add everything and amend the last commit
    aaa = !git add -A && git amend

    # Switch to a branch, creating it if necessary
    go = "!f() { git switch \"$1\" 2>/dev/null || git switch -c \"$1\"; }; f"
    feat = "!f() { git go feature/NVE-\"$1\"-\"$2\"; }; f"

    # shortcut for squashing commits
    squash = rebase -i

    # Remove branches that have already been merged with master
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # Removes obsolete files/branches and optimizes the local repository
    trim = !git remote prune origin && git dm && git gc

    # Resets any changes made to the repository
    reset = !git clean -dfi && git reset --hard && git stash clear

[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

[core]
    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes
    editor = vim

    pager = diff-so-fancy | less --tabs=4 -RFX

    # Make `git rebase` safer on OS X
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true

[credential]
    helper = osxkeychain

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[diff]
    tool = vimdiff

    # Detect copies as well as renames
    renames = copies

[difftool]
    prompt = false

[fetch]
    prune = true

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true

[pretty]
    # tut: http://gitimmersion.com/lab_10.html
    # ref: http://linux.die.net/man/1/git-log
    # Result: abc1234 Commit message (HEAD, origin/master, master) -- Nicolas Gallagher; 5 hours ago
    nice = "%C(yellow)%h%C(reset) %C(white)%s%C(cyan)%d%C(reset) -- %an; %ar"

[sequence]
    editor = interactive-rebase-tool

[advice]
    skippedCherryPicks = false

