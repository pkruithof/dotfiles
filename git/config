[alias]
    # Custom pretty log
    logshort = log --pretty=nice --date-order

    # Diffstat log
    logdiff = log --stat --format=short --abbrev-commit
    # Long format diffstat log
    logdifflong = log --stat --format=full
    # Longer format diffstat log
    logdifflonger = log --stat --format=fuller

    # Custom graph log (append any tree-ish)
    loggraphline = log --pretty=nice --date-order --graph
    # View the SHA, description, and history graph of the latest 20 commits
    loggraphshort = log --pretty=short --date-order --graph

    # Display the number of commits per author in numerical order
    who = shortlog -sn --

    # View the current working tree status using the short format
    s = status -s

    # Show the diff between the latest commit and the current state
    d = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
    # `git di $number` shows the diff between the state `$number` revisions ago and the current state
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules
    p = !"git pull; git submodule foreach git pull origin master"

    # Clone a repository including all submodules
    c = clone --recursive

    # Commit all changes
    ca = commit -a

    # Amend the currently staged files to the latest commit
    amend = commit --amend --reuse-message=HEAD

    # Switch to a branch, creating it if necessary
    go = checkout -b

    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch -a
    remotes = remote -v

    # Undo a `git push`
    undopush = push -f origin HEAD^:master

    # Removes obsolete files/branches and optimizes the local repository
    # `git remote prune origin`: remove remote-tracking branches that were deleted from the remote repo
    # `git branch --merged master | grep -v "\* master" | xargs -n 1 git branch -d`: remove local branches which have been merged
    # `git gc`: cleanup unnecessary files and optimize the local repository
    trim = !git remote prune origin; git branch --merged master | grep -v \"\* master\" | xargs -n 1 git branch -d; git gc

    # Clears any changes made to the repository
    # `git clean -df`: remove untracked files and directories from the working tree
    # `git stash clear`: remove all stashed states
    clear = !git clean -df && git reset --hard && git stash clear

    # forks current repo and updates remotes
    fork = !hub fork && git remote rename origin upstream && git remote rename pkruithof origin

    # Merge GitHub pull request on top of the `master` branch
    mpr = "!f() { \
      if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
        git fetch origin refs/pull/$1/head:pr/$1 && \
        git rebase master pr/$1 && \
        git checkout master && \
        git merge pr/$1 && \
        git branch -D pr/$1 && \
        git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
      fi \
    }; f"

    # updates fork to latest upstream version:
    # 1. checkout master
    # 2. fetch upstream
    # 3. reset upstream
    # 4. push origin
    sync = !git checkout master && git fetch upstream && git reset --hard upstream/master && git push origin master

    # shortcut for squashing commits
    squash = rebase -i upstream/master
[apply]
    # Detect whitespace errors when applying a patch
    whitespace = fix

# Use `origin` as the default remote on the `master` branch in all cases
[branch "master"]
    remote = origin
    merge = refs/heads/master

[core]
    # Use custom `.gitignore` and `.gitattributes`
    excludesfile = ~/.gitignore
    attributesfile = ~/.gitattributes
	editor = vim

    # Make `git rebase` safer on OS X
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

[credential]
    helper = osxkeychain

[color]
    # Use colors in Git commands that are capable of colored output when outputting to the terminal
    ui = auto
    interactive = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold

[color "status"]
    added = yellow
    changed = green
    untracked = cyan

[diff]
    tool = mvimdiff

[difftool]
    prompt = false

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true

[pretty]
    # tut: http://gitimmersion.com/lab_10.html
    # ref: http://linux.die.net/man/1/git-log
    # Result: abc1234 Commit message (HEAD, origin/master, master) -- Nicolas Gallagher; 5 hours ago
    nice = "%C(yellow)%h%C(reset) %C(white)%s%C(cyan)%d%C(reset) -- %an; %ar"

[push]
    default = simple

# URL shorthands
[url "git@github.com:"]
    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"
[url "git://github.com/"]
    insteadOf = "github:"
[url "git@gist.github.com:"]
    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"
[url "git://gist.github.com/"]
    insteadOf = "gist:"
